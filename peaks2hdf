import pytpc
from pytpc.constants import degrees
import argparse
import numpy as np
from xml.etree import ElementTree
from itertools import product
import h5py
import signal
import sys


def reduce_event(evt, pad_plane, excl_pads):
    evt.traces[np.where(~np.in1d(evt.traces['pad'], excl_pads))]['data'] = 0
    evt.traces['data'][:, 508:] = 0
    xyz = evt.xyzs(pads=pad_plane, peaks_only=True, return_pads=True)
    return xyz


def find_exclusion_region(xcfg, lookup):
    tree = ElementTree.parse(xcfg)
    root = tree.getroot()

    excl_pads = []
    for cobo, asad, aget, ch in product(range(10), range(4), range(4), range(68)):
        path = "./Node[@id='CoBo']/Instance[@id='{}']/AsAd[@id='{}']/Aget[@id='{}']/channel[@id='{}']/TriggerInhibition"
        node = root.find(path.format(cobo, asad, aget, ch))
        if node is not None:
            try:
                excl_pads.append(lookup[(cobo, asad, aget, ch)])
            except KeyError:
                print('The file contained an unmapped channel:', (cobo, asad, aget, ch))
                continue

    return np.array(excl_pads)


def load_padmap(fp):
    lookup = {}
    with open(fp) as lfile:
        for line in lfile:
            cobo, asad, aget, ch, pad = [int(a) for a in line.strip().split(',')]
            if -1 in (cobo, asad, aget, ch, pad):
                continue
            lookup[(cobo, asad, aget, ch)] = pad
    return lookup


def smart_progress_bar(iterable, expected_size=None):
    if not sys.stdout.isatty():

        def print_progress(iterable, expected_size=None):
            from math import log10, floor

            if expected_size is None:
                max_ = len(iterable)
            else:
                max_ = expected_size

            interval = 10**floor(log10(max_ // 100))

            for i, v in enumerate(iterable):
                if i % interval == 0:
                    print('At event {} / {}'.format(i, max_), flush=True)
                yield v

        return print_progress(iterable, expected_size)

    else:
        from clint.textui import progress
        return progress.bar(iterable, expected_size=expected_size)


def main():
    parser = argparse.ArgumentParser(description='A script to keep only the peaks from a dataset')
    parser.add_argument('input', help='The input Event file')
    parser.add_argument('output', help='The output HDF5 file, which will have a table of peak xyz values')
    parser.add_argument('--config', '-c', help='The config file to read an exclusion zone from', required=True)
    parser.add_argument('--lookup', '-l', help='The pad mapping table', required=True)
    args = parser.parse_args()

    lookup = load_padmap(args.lookup)
    excl_pads = find_exclusion_region(args.config, lookup)
    pad_plane = pytpc.generate_pad_plane(-108*degrees)

    infile = pytpc.EventFile(args.input, 'r')

    with h5py.File(args.output, 'a') as outfile:
        gp = outfile.require_group('reduced_get_events')

        if len(gp) > 0:
            first_evt = max([int(k) for k in gp.keys() if k.isdigit()]) + 1
            print('Already processed through event {}. Starting with event {}'.format(first_evt - 1, first_evt))
        else:
            first_evt = 0

        for evt in smart_progress_bar(infile.evtrange(start=first_evt), expected_size=len(infile)-first_evt):
            xyz = reduce_event(evt, pad_plane, excl_pads)
            dset = gp.create_dataset('{:d}'.format(evt.evt_id), data=xyz, compression='gzip', shuffle=True)
            dset.attrs['evt_id'] = evt.evt_id
            dset.attrs['timestamp'] = evt.timestamp


if __name__ == '__main__':
    def handle_signal(signum, stack_frame):
        print('Received signal {}. Quitting.'.format(signum))
        sys.stdout.flush()
        sys.exit(1)

    signal.signal(signal.SIGTERM, handle_signal)
    signal.signal(signal.SIGQUIT, handle_signal)
    main()
